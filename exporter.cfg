# This section defines default settings for how queries should be run.
# All settings can be overridden for any given query in its own section.
# The values shown in this example are also the fallback values used if
# a setting is not specified in the DEFAULT section or a query's section.
[DEFAULT]
# How often to run queries.
QueryIntervalSecs = 15
# How long to wait for a query to return before timing out.
QueryTimeoutSecs = 10
# The indices to run the query on.
# Any way of specifying indices supported by your Elasticsearch version can be used.
QueryIndices = _all
# What to do if a query throws an error. One of:
# * preserve - keep the metrics/values from the last successful run.
# * drop - remove metrics previously produced by the query.
# * zero - keep metrics previously produced by the query, but reset their values to 0.
QueryOnError = drop
# What to do if a metric produced by the previous run of a query is not present
# in the current run. One of:
# * preserve - keep the value of the metric from the last run it was present in.
# * drop - remove the metric.
# * zero - keep the metric, but reset its value to 0.
QueryOnMissing = drop
# Queries are defined in sections beginning with 'query_'.
# Characters following this prefix will be used as a prefix for all metrics
# generated for this query
# for merchant discovery latency event 
[query_merchant_discovery]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "latencies": {
        "avg": {
          "field": "olaElapsedTime"
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "name.keyword": "DISCOVERY_MS"
            }
          },
          {
            "match_phrase": {
              "eventType.keyword": "SLO"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }  
  }
# 95 percentile
[query_merchant_discovery_latencies]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "95percentiles": {
        "percentiles": {
          "field": "olaElapsedTime",
          "percents": [
            95
          ]
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "name.keyword": "DISCOVERY_MS"
            }
          },
          {
            "match_phrase": {
              "eventType.keyword": "SLO"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }  
  }
# for get invoice latencies event 
[query_get_invoice]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "latencies": {
        "avg": {
          "field": "olaElapsedTime"
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "name.keyword": "INVOICING"
            }
          },
          {
            "match_phrase": {
              "eventType.keyword": "SLO"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }
# 95 percentile 
[query_get_invoice_latencies]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "95percentiles": {
        "percentiles": {
          "field": "olaElapsedTime",
          "percents": [
            95
          ]
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "name.keyword": "INVOICING"
            }
          },
          {
            "match_phrase": {
              "eventType.keyword": "SLO"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }
# for quote for payment latencies event 
[query_quote_for_payment]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "latencies": {
        "avg": {
          "field": "elapsedTime"
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "eventType.keyword": "API"
            }
          },
          {
            "match_phrase": {
              "name.keyword": "USERS_QUOTE_FOR_PAYMENT"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }
# 95 percentile 
[query_quote_for_payment_latencies]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "95percentiles": {
        "percentiles": {
          "field": "elapsedTime",
          "percents": [
            95
          ]
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "eventType.keyword": "API"
            }
          },
          {
            "match_phrase": {
              "name.keyword": "USERS_QUOTE_FOR_PAYMENT"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }
# for pay latencies event 
[query_pay]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "latencies": {
        "avg": {
          "field": "elapsedTime"
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "eventType.keyword": "JOB_TERMINAL"
            }
          },
          {
            "match_phrase": {
              "name.keyword": "U_PAY"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }
  # 95 percentile 
[query_pay_latencies]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "95percentiles": {
        "percentiles": {
          "field": "elapsedTime",
          "percents": [
            95
          ]
        }
      }
    },
    "size": 0,
    "stored_fields": [
      "*"
    ],
    "script_fields": {},
    "docvalue_fields": [
      {
        "field": "@timestamp",
        "format": "date_time"
      }
    ],
    "_source": {
      "excludes": []
    },
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "eventType.keyword": "JOB_TERMINAL"
            }
          },
          {
            "match_phrase": {
              "name.keyword": "U_PAY"
            }
          },
          {
            "range": {
              "@timestamp": {
                  "gte": "now-1m/m",
                  "lt": "now/m",
                  "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }
# test for BSS event 
[query_bss_response_time]
# The DEFAULT settings can be overridden.
QueryIntervalSecs = 60
QueryTimeoutSecs = 15
QueryIndices = overwatch-core-*
QueryOnError = drop
QueryOnMissing = zero
QueryJson = {
    "aggs": {
      "apiName": {
        "terms": {
          "field": "name.keyword"
        },
        "aggs": {
          "sourceNodeId": {
            "terms": {
              "field": "sourceNodeId.keyword"
            },
            "aggs": {
              "status": {
                "terms": {
                  "field": "status.keyword"
                },
                "aggs": {
                  "latency": {
                    "avg": {
                      "field": "elapsedTime"
                    }
                  }
                }               
              }
            }
          }
        }
      }
    },
    "size": 0,
    "query": {
      "bool": {
        "must": [],
        "filter": [
          {
            "match_all": {}
          },
          {
            "match_phrase": {
              "eventType.keyword": "BSS"
            }
          },
          {
            "range": {
              "@timestamp": {
                "gte": "now-1m/m",
                "lt": "now/m",
                "format": "strict_date_optional_time"
              }
            }
          }
        ],
        "should": [],
        "must_not": []
      }
    }
  }